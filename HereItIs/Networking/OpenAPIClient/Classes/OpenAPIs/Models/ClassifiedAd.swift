//
// ClassifiedAd.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ClassifiedAd: Codable, JSONEncodable, Hashable {

    public var id: Int64
    public var title: String
    public var categoryId: Int64
    public var creationDate: String
    public var description: String
    public var isUrgent: Bool
    public var imagesUrl: ImagesURL
    public var price: Float
    public var siret: String?

    public init(id: Int64, title: String, categoryId: Int64, creationDate: String, description: String, isUrgent: Bool, imagesUrl: ImagesURL, price: Float, siret: String? = nil) {
        self.id = id
        self.title = title
        self.categoryId = categoryId
        self.creationDate = creationDate
        self.description = description
        self.isUrgent = isUrgent
        self.imagesUrl = imagesUrl
        self.price = price
        self.siret = siret
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case title
        case categoryId = "category_id"
        case creationDate = "creation_date"
        case description
        case isUrgent = "is_urgent"
        case imagesUrl = "images_url"
        case price
        case siret
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(title, forKey: .title)
        try container.encode(categoryId, forKey: .categoryId)
        try container.encode(creationDate, forKey: .creationDate)
        try container.encode(description, forKey: .description)
        try container.encode(isUrgent, forKey: .isUrgent)
        try container.encode(imagesUrl, forKey: .imagesUrl)
        try container.encode(price, forKey: .price)
        try container.encodeIfPresent(siret, forKey: .siret)
    }
}

